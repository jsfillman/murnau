/* ------------------------------------------------------------
name: "legato_synth_stereo"
version: "1.1"
Code generated with Faust 2.79.3 (https://faust.grame.fr)
Compilation options: -lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __mydsp_H__
#define  __mydsp_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>
#include <math.h>

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif

class mydspSIG0 {
	
  private:
	
	int iVec0[2];
	int iRec2[2];
	
  public:
	
	int getNumInputsmydspSIG0() {
		return 0;
	}
	int getNumOutputsmydspSIG0() {
		return 1;
	}
	
	void instanceInitmydspSIG0(int sample_rate) {
		for (int l0 = 0; l0 < 2; l0 = l0 + 1) {
			iVec0[l0] = 0;
		}
		for (int l1 = 0; l1 < 2; l1 = l1 + 1) {
			iRec2[l1] = 0;
		}
	}
	
	void fillmydspSIG0(int count, float* table) {
		for (int i1 = 0; i1 < count; i1 = i1 + 1) {
			iVec0[0] = 1;
			iRec2[0] = (iVec0[1] + iRec2[1]) % 65536;
			table[i1] = std::sin(9.58738e-05f * float(iRec2[0]));
			iVec0[1] = iVec0[0];
			iRec2[1] = iRec2[0];
		}
	}

};

static mydspSIG0* newmydspSIG0() { return (mydspSIG0*)new mydspSIG0(); }
static void deletemydspSIG0(mydspSIG0* dsp) { delete dsp; }

static float ftbl0mydspSIG0[65536];
static float mydsp_faustpower2_f(float value) {
	return value * value;
}

class mydsp : public dsp {
	
 private:
	
	FAUSTFLOAT fHslider0;
	FAUSTFLOAT fHslider1;
	int fSampleRate;
	float fConst0;
	float fConst1;
	FAUSTFLOAT fHslider2;
	FAUSTFLOAT fEntry0;
	int iVec1[2];
	float fConst2;
	FAUSTFLOAT fHslider3;
	FAUSTFLOAT fHslider4;
	FAUSTFLOAT fHslider5;
	FAUSTFLOAT fHslider6;
	FAUSTFLOAT fButton0;
	float fVec2[2];
	float fVec3[2];
	int iRec4[2];
	float fConst3;
	FAUSTFLOAT fHslider7;
	FAUSTFLOAT fHslider8;
	FAUSTFLOAT fHslider9;
	int iRec6[2];
	float fRec5[2];
	float fRec3[2];
	float fConst4;
	float fConst5;
	float fRec8[2];
	float fVec4[2];
	int IOTA0;
	float fVec5[4096];
	float fConst6;
	float fRec7[2];
	float fRec9[2];
	FAUSTFLOAT fHslider10;
	float fRec11[2];
	FAUSTFLOAT fHslider11;
	FAUSTFLOAT fHslider12;
	FAUSTFLOAT fHslider13;
	int iRec12[2];
	float fRec1[3];
	float fRec0[3];
	FAUSTFLOAT fHslider14;
	FAUSTFLOAT fHslider15;
	FAUSTFLOAT fHslider16;
	FAUSTFLOAT fHslider17;
	FAUSTFLOAT fHslider18;
	FAUSTFLOAT fHslider19;
	float fRec14[3];
	float fRec13[3];
	
 public:
	mydsp() {
	}
	
	void metadata(Meta* m) { 
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/sAndH:author", "Romain Michon");
		m->declare("basics.lib/version", "1.21.0");
		m->declare("compile_options", "-lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0");
		m->declare("description", "Monophonic synth with stereo ADSR + filters");
		m->declare("envelopes.lib/adsr:author", "Yann Orlarey and Andrey Bundin");
		m->declare("envelopes.lib/ar:author", "Yann Orlarey, Stéphane Letz");
		m->declare("envelopes.lib/author", "GRAME");
		m->declare("envelopes.lib/copyright", "GRAME");
		m->declare("envelopes.lib/license", "LGPL with exception");
		m->declare("envelopes.lib/name", "Faust Envelope Library");
		m->declare("envelopes.lib/version", "1.3.0");
		m->declare("filename", "legato_synth.dsp");
		m->declare("filters.lib/fir:author", "Julius O. Smith III");
		m->declare("filters.lib/fir:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/fir:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/iir:author", "Julius O. Smith III");
		m->declare("filters.lib/iir:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/iir:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/lowpass0_highpass1", "MIT-style STK-4.3 license");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/pole:author", "Julius O. Smith III");
		m->declare("filters.lib/pole:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/pole:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/resonlp:author", "Julius O. Smith III");
		m->declare("filters.lib/resonlp:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/resonlp:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/tf2:author", "Julius O. Smith III");
		m->declare("filters.lib/tf2:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/tf2:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/tf2s:author", "Julius O. Smith III");
		m->declare("filters.lib/tf2s:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/tf2s:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/version", "1.7.1");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.8.1");
		m->declare("name", "legato_synth_stereo");
		m->declare("noises.lib/name", "Faust Noise Generator Library");
		m->declare("noises.lib/version", "1.4.1");
		m->declare("oscillators.lib/lf_sawpos:author", "Bart Brouns, revised by Stéphane Letz");
		m->declare("oscillators.lib/lf_sawpos:licence", "STK-4.3");
		m->declare("oscillators.lib/name", "Faust Oscillator Library");
		m->declare("oscillators.lib/saw2ptr:author", "Julius O. Smith III");
		m->declare("oscillators.lib/saw2ptr:license", "STK-4.3");
		m->declare("oscillators.lib/sawN:author", "Julius O. Smith III");
		m->declare("oscillators.lib/sawN:license", "STK-4.3");
		m->declare("oscillators.lib/version", "1.6.0");
		m->declare("platform.lib/name", "Generic Platform Library");
		m->declare("platform.lib/version", "1.3.0");
		m->declare("version", "1.1");
	}

	virtual int getNumInputs() {
		return 0;
	}
	virtual int getNumOutputs() {
		return 2;
	}
	
	static void classInit(int sample_rate) {
		mydspSIG0* sig0 = newmydspSIG0();
		sig0->instanceInitmydspSIG0(sample_rate);
		sig0->fillmydspSIG0(65536, ftbl0mydspSIG0);
		deletemydspSIG0(sig0);
	}
	
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0 = std::min<float>(1.92e+05f, std::max<float>(1.0f, float(fSampleRate)));
		fConst1 = 3.1415927f / fConst0;
		fConst2 = 1.0f / fConst0;
		fConst3 = 1.0f / std::max<float>(1.0f, 0.001f * fConst0);
		fConst4 = 4.0f / fConst0;
		fConst5 = 0.25f * fConst0;
		fConst6 = 0.5f * fConst0;
	}
	
	virtual void instanceResetUserInterface() {
		fHslider0 = FAUSTFLOAT(1.0f);
		fHslider1 = FAUSTFLOAT(0.5f);
		fHslider2 = FAUSTFLOAT(2e+03f);
		fEntry0 = FAUSTFLOAT(2.0f);
		fHslider3 = FAUSTFLOAT(4.4e+02f);
		fHslider4 = FAUSTFLOAT(0.0f);
		fHslider5 = FAUSTFLOAT(0.0f);
		fHslider6 = FAUSTFLOAT(0.0f);
		fButton0 = FAUSTFLOAT(0.0f);
		fHslider7 = FAUSTFLOAT(0.0f);
		fHslider8 = FAUSTFLOAT(0.0f);
		fHslider9 = FAUSTFLOAT(0.0f);
		fHslider10 = FAUSTFLOAT(0.005f);
		fHslider11 = FAUSTFLOAT(0.9f);
		fHslider12 = FAUSTFLOAT(0.1f);
		fHslider13 = FAUSTFLOAT(0.5f);
		fHslider14 = FAUSTFLOAT(0.5f);
		fHslider15 = FAUSTFLOAT(2e+03f);
		fHslider16 = FAUSTFLOAT(0.005f);
		fHslider17 = FAUSTFLOAT(0.9f);
		fHslider18 = FAUSTFLOAT(0.1f);
		fHslider19 = FAUSTFLOAT(0.5f);
	}
	
	virtual void instanceClear() {
		for (int l2 = 0; l2 < 2; l2 = l2 + 1) {
			iVec1[l2] = 0;
		}
		for (int l3 = 0; l3 < 2; l3 = l3 + 1) {
			fVec2[l3] = 0.0f;
		}
		for (int l4 = 0; l4 < 2; l4 = l4 + 1) {
			fVec3[l4] = 0.0f;
		}
		for (int l5 = 0; l5 < 2; l5 = l5 + 1) {
			iRec4[l5] = 0;
		}
		for (int l6 = 0; l6 < 2; l6 = l6 + 1) {
			iRec6[l6] = 0;
		}
		for (int l7 = 0; l7 < 2; l7 = l7 + 1) {
			fRec5[l7] = 0.0f;
		}
		for (int l8 = 0; l8 < 2; l8 = l8 + 1) {
			fRec3[l8] = 0.0f;
		}
		for (int l9 = 0; l9 < 2; l9 = l9 + 1) {
			fRec8[l9] = 0.0f;
		}
		for (int l10 = 0; l10 < 2; l10 = l10 + 1) {
			fVec4[l10] = 0.0f;
		}
		IOTA0 = 0;
		for (int l11 = 0; l11 < 4096; l11 = l11 + 1) {
			fVec5[l11] = 0.0f;
		}
		for (int l12 = 0; l12 < 2; l12 = l12 + 1) {
			fRec7[l12] = 0.0f;
		}
		for (int l13 = 0; l13 < 2; l13 = l13 + 1) {
			fRec9[l13] = 0.0f;
		}
		for (int l14 = 0; l14 < 2; l14 = l14 + 1) {
			fRec11[l14] = 0.0f;
		}
		for (int l15 = 0; l15 < 2; l15 = l15 + 1) {
			iRec12[l15] = 0;
		}
		for (int l16 = 0; l16 < 3; l16 = l16 + 1) {
			fRec1[l16] = 0.0f;
		}
		for (int l17 = 0; l17 < 3; l17 = l17 + 1) {
			fRec0[l17] = 0.0f;
		}
		for (int l18 = 0; l18 < 3; l18 = l18 + 1) {
			fRec14[l18] = 0.0f;
		}
		for (int l19 = 0; l19 < 3; l19 = l19 + 1) {
			fRec13[l19] = 0.0f;
		}
	}
	
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual mydsp* clone() {
		return new mydsp();
	}
	
	virtual int getSampleRate() {
		return fSampleRate;
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("legato_synth_stereo");
		ui_interface->declare(&fHslider10, "osc", "/attack_L");
		ui_interface->addHorizontalSlider("attack_L", &fHslider10, FAUSTFLOAT(0.005f), FAUSTFLOAT(0.001f), FAUSTFLOAT(5.0f), FAUSTFLOAT(0.001f));
		ui_interface->declare(&fHslider16, "osc", "/attack_R");
		ui_interface->addHorizontalSlider("attack_R", &fHslider16, FAUSTFLOAT(0.005f), FAUSTFLOAT(0.001f), FAUSTFLOAT(5.0f), FAUSTFLOAT(0.001f));
		ui_interface->declare(&fHslider7, "osc", "/coarse_tune");
		ui_interface->addHorizontalSlider("coarse_tune", &fHslider7, FAUSTFLOAT(0.0f), FAUSTFLOAT(-24.0f), FAUSTFLOAT(24.0f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fHslider2, "osc", "/cutoff_L");
		ui_interface->addHorizontalSlider("cutoff_L", &fHslider2, FAUSTFLOAT(2e+03f), FAUSTFLOAT(2e+01f), FAUSTFLOAT(2e+04f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fHslider15, "osc", "/cutoff_R");
		ui_interface->addHorizontalSlider("cutoff_R", &fHslider15, FAUSTFLOAT(2e+03f), FAUSTFLOAT(2e+01f), FAUSTFLOAT(2e+04f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fHslider12, "osc", "/decay_L");
		ui_interface->addHorizontalSlider("decay_L", &fHslider12, FAUSTFLOAT(0.1f), FAUSTFLOAT(0.001f), FAUSTFLOAT(3.0f), FAUSTFLOAT(0.001f));
		ui_interface->declare(&fHslider18, "osc", "/decay_R");
		ui_interface->addHorizontalSlider("decay_R", &fHslider18, FAUSTFLOAT(0.1f), FAUSTFLOAT(0.001f), FAUSTFLOAT(3.0f), FAUSTFLOAT(0.001f));
		ui_interface->declare(&fHslider6, "osc", "/end_freq_offset");
		ui_interface->addHorizontalSlider("end_freq_offset", &fHslider6, FAUSTFLOAT(0.0f), FAUSTFLOAT(-2e+02f), FAUSTFLOAT(2e+02f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fHslider8, "osc", "/fine_tune");
		ui_interface->addHorizontalSlider("fine_tune", &fHslider8, FAUSTFLOAT(0.0f), FAUSTFLOAT(-1e+02f), FAUSTFLOAT(1e+02f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fHslider3, "osc", "/freq");
		ui_interface->addHorizontalSlider("freq", &fHslider3, FAUSTFLOAT(4.4e+02f), FAUSTFLOAT(2e+01f), FAUSTFLOAT(8e+03f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fHslider0, "osc", "/gain");
		ui_interface->addHorizontalSlider("gain", &fHslider0, FAUSTFLOAT(1.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fButton0, "osc", "/gate");
		ui_interface->addButton("gate", &fButton0);
		ui_interface->declare(&fHslider4, "osc", "/ramp_time");
		ui_interface->addHorizontalSlider("ramp_time", &fHslider4, FAUSTFLOAT(0.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fHslider13, "osc", "/release_L");
		ui_interface->addHorizontalSlider("release_L", &fHslider13, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.1f), FAUSTFLOAT(5.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fHslider19, "osc", "/release_R");
		ui_interface->addHorizontalSlider("release_R", &fHslider19, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.1f), FAUSTFLOAT(5.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fHslider1, "osc", "/resonance_L");
		ui_interface->addHorizontalSlider("resonance_L", &fHslider1, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.1f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fHslider14, "osc", "/resonance_R");
		ui_interface->addHorizontalSlider("resonance_R", &fHslider14, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.1f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fHslider9, "osc", "/stability");
		ui_interface->addHorizontalSlider("stability", &fHslider9, FAUSTFLOAT(0.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(2e+01f), FAUSTFLOAT(0.1f));
		ui_interface->declare(&fHslider5, "osc", "/start_freq_offset");
		ui_interface->addHorizontalSlider("start_freq_offset", &fHslider5, FAUSTFLOAT(0.0f), FAUSTFLOAT(-2e+02f), FAUSTFLOAT(2e+02f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fHslider11, "osc", "/sustain_L");
		ui_interface->addHorizontalSlider("sustain_L", &fHslider11, FAUSTFLOAT(0.9f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fHslider17, "osc", "/sustain_R");
		ui_interface->addHorizontalSlider("sustain_R", &fHslider17, FAUSTFLOAT(0.9f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fEntry0, "osc", "/wave_type");
		ui_interface->addNumEntry("wave_type", &fEntry0, FAUSTFLOAT(2.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(3.0f), FAUSTFLOAT(1.0f));
		ui_interface->closeBox();
	}
	
	virtual void compute(int count, FAUSTFLOAT** RESTRICT inputs, FAUSTFLOAT** RESTRICT outputs) {
		FAUSTFLOAT* output0 = outputs[0];
		FAUSTFLOAT* output1 = outputs[1];
		float fSlow0 = float(fHslider0);
		float fSlow1 = 1.0f / float(fHslider1);
		float fSlow2 = std::tan(fConst1 * float(fHslider2));
		float fSlow3 = 1.0f / fSlow2;
		float fSlow4 = (fSlow1 + fSlow3) / fSlow2 + 1.0f;
		float fSlow5 = fSlow0 / fSlow4;
		float fSlow6 = 1.0f / fSlow4;
		int iSlow7 = int(float(fEntry0));
		float fSlow8 = float(iSlow7 == 0);
		float fSlow9 = float(fHslider3);
		float fSlow10 = float(fHslider4);
		float fSlow11 = float(fSlow10 > 0.0f);
		float fSlow12 = float(fHslider5);
		float fSlow13 = float(fHslider6) - fSlow12;
		float fSlow14 = std::max<float>(1.0f, fConst0 * fSlow10);
		float fSlow15 = 1.0f / fSlow14;
		float fSlow16 = float(fButton0);
		float fSlow17 = float(int(float(fHslider7)));
		float fSlow18 = float(fHslider8);
		float fSlow19 = float(fHslider9);
		float fSlow20 = fConst4 * float(iSlow7 == 1);
		float fSlow21 = float(iSlow7 == 2);
		float fSlow22 = fConst5 * float(iSlow7 == 3);
		float fSlow23 = std::max<float>(1.0f, fConst0 * float(fHslider10));
		float fSlow24 = 1.0f / fSlow23;
		float fSlow25 = float(fHslider11);
		float fSlow26 = (1.0f - fSlow25) / std::max<float>(1.0f, fConst0 * float(fHslider12));
		float fSlow27 = 1.0f / std::max<float>(1.0f, fConst0 * float(fHslider13));
		int iSlow28 = fSlow16 == 0.0f;
		float fSlow29 = (fSlow3 - fSlow1) / fSlow2 + 1.0f;
		float fSlow30 = 2.0f * (1.0f - 1.0f / mydsp_faustpower2_f(fSlow2));
		float fSlow31 = 1.0f / float(fHslider14);
		float fSlow32 = std::tan(fConst1 * float(fHslider15));
		float fSlow33 = 1.0f / fSlow32;
		float fSlow34 = (fSlow31 + fSlow33) / fSlow32 + 1.0f;
		float fSlow35 = fSlow0 / fSlow34;
		float fSlow36 = 1.0f / fSlow34;
		float fSlow37 = std::max<float>(1.0f, fConst0 * float(fHslider16));
		float fSlow38 = 1.0f / fSlow37;
		float fSlow39 = float(fHslider17);
		float fSlow40 = (1.0f - fSlow39) / std::max<float>(1.0f, fConst0 * float(fHslider18));
		float fSlow41 = 1.0f / std::max<float>(1.0f, fConst0 * float(fHslider19));
		float fSlow42 = (fSlow33 - fSlow31) / fSlow32 + 1.0f;
		float fSlow43 = 2.0f * (1.0f - 1.0f / mydsp_faustpower2_f(fSlow32));
		for (int i0 = 0; i0 < count; i0 = i0 + 1) {
			iVec1[0] = 1;
			int iTemp0 = 1 - iVec1[1];
			fVec2[0] = fSlow16;
			float fTemp1 = fSlow16 - fVec2[1];
			float fTemp2 = fTemp1 * float(fTemp1 > 0.0f);
			fVec3[0] = fTemp2;
			iRec4[0] = (iRec4[1] + (iRec4[1] > 0)) * (fTemp2 <= fVec3[1]) + (fTemp2 > fVec3[1]);
			float fTemp3 = float(iRec4[0]);
			float fTemp4 = fSlow9 + fSlow11 * (fSlow12 + fSlow13 * std::max<float>(0.0f, std::min<float>(fSlow15 * fTemp3, fConst3 * (fSlow14 - fTemp3) + 1.0f)));
			iRec6[0] = 1103515245 * iRec6[1] + 12345;
			fRec5[0] = ((int(9.313226e-10f * float(iRec6[0]) + -1.0f)) ? fSlow16 : fRec5[1]);
			float fTemp5 = std::pow(2.0f, 0.083333336f * (fSlow17 + 0.01f * (fSlow18 + fSlow19 * fRec5[0])));
			float fTemp6 = fTemp4 * fTemp5;
			float fTemp7 = ((iTemp0) ? 0.0f : fRec3[1] + fConst2 * fTemp6);
			fRec3[0] = fTemp7 - std::floor(fTemp7);
			float fTemp8 = std::max<float>(fTemp6, 23.44895f);
			float fTemp9 = std::max<float>(2e+01f, std::fabs(fTemp8));
			float fTemp10 = ((iTemp0) ? 0.0f : fRec8[1] + fConst2 * fTemp9);
			fRec8[0] = fTemp10 - std::floor(fTemp10);
			float fTemp11 = mydsp_faustpower2_f(2.0f * fRec8[0] + -1.0f);
			fVec4[0] = fTemp11;
			float fTemp12 = float(iVec1[1]) * (fTemp11 - fVec4[1]) / fTemp9;
			fVec5[IOTA0 & 4095] = fTemp12;
			float fTemp13 = std::max<float>(0.0f, std::min<float>(2047.0f, fConst6 / fTemp8));
			int iTemp14 = int(fTemp13);
			float fTemp15 = std::floor(fTemp13);
			float fTemp16 = fTemp12 - fVec5[(IOTA0 - iTemp14) & 4095] * (fTemp15 + (1.0f - fTemp13)) - (fTemp13 - fTemp15) * fVec5[(IOTA0 - (iTemp14 + 1)) & 4095];
			fRec7[0] = 0.999f * fRec7[1] + fConst5 * fTemp16;
			float fTemp17 = std::max<float>(1.1920929e-07f, std::fabs(fTemp6));
			float fTemp18 = fRec9[1] + fConst2 * fTemp17;
			float fTemp19 = fTemp18 + -1.0f;
			int iTemp20 = fTemp19 < 0.0f;
			fRec9[0] = ((iTemp20) ? fTemp18 : fTemp19);
			float fRec10 = ((iTemp20) ? fTemp18 : fTemp18 + fTemp19 * (1.0f - fConst0 / fTemp17));
			float fTemp21 = fSlow8 * ftbl0mydspSIG0[std::max<int>(0, std::min<int>(int(65536.0f * fRec3[0]), 65535))] + fSlow20 * fRec7[0] * fTemp4 * fTemp5 + fSlow21 * (2.0f * fRec10 + -1.0f) + fSlow22 * fTemp16;
			fRec11[0] = fSlow16 + fRec11[1] * float(fVec2[1] >= fSlow16);
			iRec12[0] = iSlow28 * (iRec12[1] + 1);
			float fTemp22 = float(iRec12[0]);
			fRec1[0] = fTemp21 * std::max<float>(0.0f, std::min<float>(fSlow24 * fRec11[0], std::max<float>(fSlow26 * (fSlow23 - fRec11[0]) + 1.0f, fSlow25)) * (1.0f - fSlow27 * fTemp22)) - fSlow6 * (fSlow29 * fRec1[2] + fSlow30 * fRec1[1]);
			fRec0[0] = fSlow6 * (fRec1[2] + fRec1[0] + 2.0f * fRec1[1] - (fSlow29 * fRec0[2] + fSlow30 * fRec0[1]));
			output0[i0] = FAUSTFLOAT(fSlow5 * (fRec0[2] + fRec0[0] + 2.0f * fRec0[1]));
			fRec14[0] = fTemp21 * std::max<float>(0.0f, std::min<float>(fSlow38 * fRec11[0], std::max<float>(fSlow40 * (fSlow37 - fRec11[0]) + 1.0f, fSlow39)) * (1.0f - fSlow41 * fTemp22)) - fSlow36 * (fSlow42 * fRec14[2] + fSlow43 * fRec14[1]);
			fRec13[0] = fSlow36 * (fRec14[2] + fRec14[0] + 2.0f * fRec14[1] - (fSlow42 * fRec13[2] + fSlow43 * fRec13[1]));
			output1[i0] = FAUSTFLOAT(fSlow35 * (fRec13[2] + fRec13[0] + 2.0f * fRec13[1]));
			iVec1[1] = iVec1[0];
			fVec2[1] = fVec2[0];
			fVec3[1] = fVec3[0];
			iRec4[1] = iRec4[0];
			iRec6[1] = iRec6[0];
			fRec5[1] = fRec5[0];
			fRec3[1] = fRec3[0];
			fRec8[1] = fRec8[0];
			fVec4[1] = fVec4[0];
			IOTA0 = IOTA0 + 1;
			fRec7[1] = fRec7[0];
			fRec9[1] = fRec9[0];
			fRec11[1] = fRec11[0];
			iRec12[1] = iRec12[0];
			fRec1[2] = fRec1[1];
			fRec1[1] = fRec1[0];
			fRec0[2] = fRec0[1];
			fRec0[1] = fRec0[0];
			fRec14[2] = fRec14[1];
			fRec14[1] = fRec14[0];
			fRec13[2] = fRec13[1];
			fRec13[1] = fRec13[0];
		}
	}

};

#endif
